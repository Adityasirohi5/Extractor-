from pyrogram import filters
from Extractor import app
from Extractor.core import script
from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton



# ------------------------------------------------------------------------------- #

button = InlineKeyboardMarkup([
                [
                  InlineKeyboardButton("·¥ç·¥è·¥Ö·¥ás", callback_data="help_")
                ],[
                  InlineKeyboardButton("·¥Ñ ú·¥Ä…¥…¥·¥á ü", url="https://t.me/DevsCreations"),
                  InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/DevsOops")
                ]])


modes_button = InlineKeyboardMarkup([
                [
                  InlineKeyboardButton("·¥Ñ·¥ús·¥õ·¥è·¥ç", callback_data="custom_"),
                  InlineKeyboardButton("·¥ç·¥Ä…¥·¥ú·¥Ä ü", callback_data="manual_")
                ],[
                  InlineKeyboardButton("ùêÅ ùêÄ ùêÇ ùêä", callback_data="home_")
                ]])


course_buttons = [              
                [
                    InlineKeyboardButton("ss·¥Ñ ·¥ç·¥Ä·¥ã·¥á Ä", callback_data="maintainer_"),   
                    InlineKeyboardButton("·¥ò·¥á Ä“ì·¥á·¥Ñ·¥õ ·¥Ä·¥Ñ·¥Ä·¥Ö·¥á·¥ç è", callback_data="maintainer_"),
                    InlineKeyboardButton("·¥Ä·¥ç·¥Ä…¥ s…™ Ä", callback_data="maintainer_")
                ],
                [
                    InlineKeyboardButton("·¥Ñ ü·¥Äss·¥ò ü·¥ús", callback_data="maintainer_"),   
                    InlineKeyboardButton("·¥á1 ·¥Ñ·¥è·¥Ä·¥Ñ ú…™…¥…¢", callback_data="maintainer_"),
                    InlineKeyboardButton("·¥ò·¥á Ä·¥ç·¥Ä Ä ss·¥Ñ", callback_data="maintainer_")
                ],
                [
                    InlineKeyboardButton("s·¥Ä·¥ç è·¥Ä·¥ã  Ä·¥Äs", callback_data="maintainer_"),   
                    InlineKeyboardButton("·¥†·¥ä ·¥á·¥Ö·¥ú·¥Ñ·¥Ä·¥õ…™·¥è…¥", callback_data="maintainer_"),
                    InlineKeyboardButton("·¥ç·¥Ö ·¥Ñ ü·¥Äss·¥ás", callback_data="maintainer_")
                ],
                [
                    InlineKeyboardButton("…¢ è·¥Ä…¥  ô…™…¥·¥Ö·¥ú", callback_data="maintainer_"),   
                    InlineKeyboardButton("·¥Ö ú·¥Ä…¥·¥Ä…¥·¥ä·¥Ä è …™·¥Äs", callback_data="maintainer_"),
                    InlineKeyboardButton("ss·¥Ñ …¢·¥ú Ä·¥ú·¥ã·¥ú ü", callback_data="maintainer_")
                ],
                [
                    InlineKeyboardButton("·¥õ ú…™…¥·¥ã ss·¥Ñ", callback_data="maintainer_"),   
                    InlineKeyboardButton("·¥Äs ú…™s ú s…™…¥…¢  ü·¥á·¥Ñ.", callback_data="maintainer_"),
                    InlineKeyboardButton("…¥…¢  ü·¥á·¥Ä Ä…¥·¥á Äs", callback_data="maintainer_")
                ],
                [
                    InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="home_"),
                    InlineKeyboardButton("·¥Ñ ü·¥èÍú±·¥á", callback_data="close_data")
                ]
                ]


back_buttons  = [[
                    InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="modes_"),                    
                ]]



# ------------------------------------------------------------------------------- #




@app.on_message(filters.command("start"))
async def start(_,message):
  await message.reply_photo(photo="https://telegra.ph/file/9456751a4ca1a346e631f.jpg", 
                            caption=script.START_TXT.format(message.from_user.mention),
                            reply_markup=button)




@app.on_callback_query()
async def cb_handler(client, query):
    if query.data=="home_":
        reply_markup = InlineKeyboardMarkup(button)
        try:
            await query.edit_message_text(
                start_txt.format(query.from_user.mention),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #
        
    elif query.data=="help_":        
        reply_markup = InlineKeyboardMarkup(course_buttons)
        try:
            await query.edit_message_text(
                help_txt,
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass

# ------------------------------------------------------------------------------- #

    elif query.data=="maintainer_":
            await query.answer(("s·¥è·¥è…¥.... \n  ô·¥è·¥õ ·¥ú…¥·¥Ö·¥á Ä …™…¥ ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥Ä…¥·¥Ñ·¥á "), show_alert=True)

  
# ------------------------------------------------------------------------------- #
 
    elif query.data=="close_data":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
        except:
            pass
