import requests
import json
import os
from Downloader import app
from config import SUDO_USERS
from pyrogram import Client, filters
from pyrogram.types import Message

api = 'https://api.classplusapp.com/v2'

headers = {
    'accept-encoding': 'gzip',
    'accept-language': 'EN',
    'api-version': '35',
    'app-version': '1.4.73.2',
    'build-number': '35',
    'connection': 'Keep-Alive',
    'content-type': 'application/json',
    'device-details': 'Xiaomi_Redmi 7_SDK-32',
    'device-id': 'c28d3cb16bbdac01',
    'host': 'api.classplusapp.com',
    'region': 'IN',
    'user-agent': 'Mobile-Android',
    'webengage-luid': '00000187-6fe4-5d41-a530-26186858be4c'
}

@app.on_message(filters.command(['cpd']))& filters.user(SUDO_USERS))
async def account_login(_, message):
    def get_course_content(session, course_id, folder_id=0):
        fetched_contents = []
        params = {'courseId': course_id, 'folderId': folder_id}
        res = session.get(f'{api}/course/content/get', params=params).json()

        if res['status'] == 'success':
            contents = res['data']['courseContent']

            for content in contents:
                if content['contentType'] == 1:
                    sub_contents = get_course_content(session, course_id, content['id'])
                    fetched_contents += sub_contents
                else:
                    name, url = content['name'], content['url']
                    fetched_contents.append(f'{name}: {url}')

        return fetched_contents

    try:
        reply = await message.chat.ask(
            ('**Send your credentials as shown below.\n\n'
             'Organisation Code\n'
             'Phone Number\n\n'
             'OR\n\n'
             'Access Token**'),
            reply_to_message_id=message.message_id
        )

        creds = reply.text
        session = requests.Session()
        session.headers.update(headers)
        logged_in = False

        if '\n' in creds:
            org_code, phone_no = map(str.strip, creds.split('\n'))

            res = session.get(f'{api}/orgs/{org_code}').json()

            if res.get('status') == 'success':
                org_id = int(res['data']['orgId'])
                data = {
                    'countryExt': '91',
                    'mobile': phone_no,
                    'viaSms': 1,
                    'orgId': org_id,
                    'eventType': 'login',
                    'otpHash': 'j7ej6eW5VO'
                }

                res = session.post(f'{api}/otp/generate', json=data).json()

                if res.get('status') == 'success':
                    session_id = res['data']['sessionId']
                    reply = await message.chat.ask('**Send OTP ?**', reply_to_message_id=reply.message_id)

                    if reply.text.isdigit():
                        otp = reply.text.strip()
                        data = {
                            'otp': otp,
                            'sessionId': session_id,
                            'orgId': org_id,
                            'fingerprintId': 'a3ee05fbde3958184f682839be4fd0f7',
                            'countryExt': '91',
                            'mobile': phone_no,
                        }

                        res = session.post(f'{api}/users/verify', json=data).json()

                        if res.get('status') == 'success':
                            user_id, token = res['data']['user']['id'], res['data']['token']
                            session.headers['x-access-token'] = token
                            await reply.reply(
                                f'**Your Access Token for future uses - \n\n`{token}`**',
                                quote=True
                            )
                            logged_in = True
                        else:
                            raise Exception('Failed to verify OTP.')
                    else:
                        raise Exception('Failed to validate OTP.')
                else:
                    raise Exception('Failed to generate OTP.')
            else:
                raise Exception('Failed to get organization Id.')
        else:
            token = creds.strip()
            session.headers['x-access-token'] = token

            res = session.get(f'{api}/users/details').json()

            if res.get('status') == 'success':
                user_id = res['data']['responseData']['user']['id']
                logged_in = True
            else:
                raise Exception('Failed to get user details.')

        if logged_in:
            params = {'userId': user_id, 'tabCategoryId': 3}
            res = session.get(f'{api}/profiles/users/data', params=params).json()

            if res.get('status') == 'success':
                courses = res['data']['responseData']['coursesData']

                if courses:
                    text = '\n'.join(f"{cnt + 1}. {course['name']}" for cnt, course in enumerate(courses))
                    reply = await message.chat.ask(f'**Send index number of the course to download.\n\n{text}**',
                                                   reply_to_message_id=reply.message_id)

                    if reply.text.isdigit() and 1 <= int(reply.text) <= len(courses):
                        selected_course_index = int(reply.text.strip())
                        course = courses[selected_course_index - 1]

                        selected_course_id, selected_course_name = course['id'], course['name']
                        loader = await reply.reply('**Extracting course...**', quote=True)
                        course_content = get_course_content(session, selected_course_id)

                        await loader.delete()

                        if course_content:
                            caption = (
                                f'**App Name : Classplus\n'
                                f'Batch Name : {selected_course_name}**'
                            )

                            text_file, html_file = f'assets/{get_datetime_str()}.txt', f'assets/{get_datetime_str()}.html'
                            open(text_file, 'w').writelines(course_content)

                            await app.send_document(
                                message.chat.id,
                                text_file,
                                caption=caption,
                                file_name=f"{selected_course_name}.txt",
                                reply_to_message_id=reply.message_id
                            )

                            create_html_file(html_file, selected_course_name, course_content)

                            await app.send_document(
                                message.chat.id,
                                html_file,
                                caption=caption,
                                file_name=f"{selected_course_name}.html",
                                reply_to_message_id=reply.message_id
                            )

                            os.remove(text_file)
                            os.remove(html_file)
                        else:
                            raise Exception('Did not found any content in course.')
                    else:
                        raise Exception('Failed to validate course selection.')
                else:
                    raise Exception('Did not found any course.')
            else:
                raise Exception('Failed to get courses.')
    except Exception as error:
        print(f'Error: {error}')
        await reply.reply(f'**Error: {error}**', quote=True)
